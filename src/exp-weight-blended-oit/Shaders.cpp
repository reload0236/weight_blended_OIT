#include "WeightBlendedOitExample.h"

const std::string WeightBlendedOitExample::render_vs = 
    "#version 430 core\n"
    "\n"
    "layout (location = 0) in vec4 position;\n"
    "layout (location = 1) in vec3 normal;\n"
    "\n"
    "uniform mat4 model_matrix;\n"
    "uniform mat4 proj_matrix;\n"
    "\n"
    "layout (location = 0) out vec3 vs_worldpos;\n"
    "layout (location = 1) out vec3 vs_normal;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "    vec4 position = proj_matrix * model_matrix * position;\n"
    "    gl_Position = position;\n"
    "    vs_worldpos = position.xyz;\n"
    "    vs_normal = mat3(model_matrix) * normal;\n"
    "}\n";

const std::string WeightBlendedOitExample::render_fs =
    "#version 430 core\n"
    "\n"
    "layout (location = 0) out vec4 color;\n"
    "\n"
    "layout (location = 0) in vec3 vs_worldpos;\n"
    "layout (location = 1) in vec3 vs_normal;\n"
    "\n"
    "uniform vec4 color_ambient = vec4(0.2, 0.2, 0.2, 0.2);\n"
    "uniform vec4 color_diffuse = vec4(1.0, 1.0, 1.0, 1.0);\n"
    "\n"
    "uniform vec3 light_direction = vec3(-1.0, -1.0, -1.0);\n"
    "uniform vec4 light_color = vec4(.8, .8, .8, 1.0);\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "    vec3 normal = normalize(vs_normal);\n"
    "    float diffuse = max(0.0, dot(normal, -light_direction));\n"
    "    color = color_ambient * color_diffuse + diffuse * color_diffuse * light_color;\n"
    "}\n";

const std::string WeightBlendedOitExample::oit_output_fs =
    "#version 430 core\n"
    "\n"
    "layout (location = 0) out vec4 accum;\n"
    "layout (location = 1) out float reveal;\n"
    "\n"
    "layout (location = 0) in vec3 vs_worldpos;\n"
    "layout (location = 1) in vec3 vs_normal;\n"
    "\n"
    "uniform vec4 color_ambient = vec4(0.2, 0.2, 0.2, 0.2);\n"
    "uniform vec4 color_diffuse = vec4(1.0, 1.0, 1.0, 1.0);\n"
    "\n"
    "uniform vec3 light_direction = vec3(-1.0, -1.0, -1.0);\n"
    "uniform vec4 light_color = vec4(.8, .8, .8, 1.0);\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "    vec3 normal = normalize(vs_normal);\n"
    "    float diffuse = max(0.0, dot(normal, -light_direction));\n"
    "    vec4 color = color_ambient * color_diffuse + diffuse * color_diffuse * light_color;\n"

    "    // Equaltion 9\n"
    "    float minRight = 0.03 / (1e-5 + pow(abs(gl_FragCoord.w), 4.0));\n"
    "    float weight = color.a * max(1e-2, min(3e3, minRight));\n"
    "\n"
    "    accum = vec4( color.rgb * color.a, color.a ) * weight;\n"
    "    reveal = color.a;\n"
    "}\n";

const std::string WeightBlendedOitExample::fullscreen_quad_vs =
    "#version 430 core\n"
    "\n"
    "layout (location = 0) in vec4 position;\n"
    "layout (location = 0) out vec2 uv;\n"
    "\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "    uv = (position.xy + 1.0) * 0.5;\n"
    "    gl_Position = vec4(position.xyz, 1.0);\n"
    "}\n";

const std::string WeightBlendedOitExample::oit_overlay_fs =
    "#version 430 core\n"
    "\n"
    "layout (location = 0) out vec4 frag_col;\n"
    "layout (location = 0) in vec2 uv;\n"
    "\n"
    "uniform sampler2D accum_texture;\n"
    "uniform sampler2D reveal_texture;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "   vec4 accum = texture(accum_texture, uv.xy);\n"
    "   float revealage = texture(reveal_texture, uv.xy).r;\n"
    "   vec3 avg_col = accum.rgb / clamp( accum.a, 1e-4, 5e4 );\n"
    "   frag_col = vec4( avg_col, revealage );\n"
    "}\n";

const std::string WeightBlendedOitExample::render_view_fs = 
    "#version 430 core\n"
    "\n"
    "layout (location = 0) out vec4 frag_col;\n"
    "layout (location = 0) in vec2 uv;\n"
    "\n"
    "uniform sampler2D color_texture;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "   frag_col = texture(color_texture, uv.xy);\n"
    "}\n";
